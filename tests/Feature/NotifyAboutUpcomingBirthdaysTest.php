<?php

namespace Tests\Feature;

use App\Notifications\BirthdayInAWeek;
use App\Notifications\BirthdayToday;
use App\Notifications\BirthdayTomorrow;
use App\Services\Birthday\BirthdayService;
use App\Services\Birthday\UserRepository;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Notification;
use Tests\Fixtures\BirthdayDataProvider;
use Tests\TestCase;

use function PHPUnit\Framework\assertSame;

class NotifyAboutUpcomingBirthdaysTest extends TestCase
{
	use RefreshDatabase;

	public function setUp(): void
	{
		parent::setUp();

		Notification::fake();
	}

	public function test_no_notifications_sent_when_no_upcoming_birthdays()
	{
		$service = new BirthdayService(new BirthdayDataProvider());
		$service->sync();
		$service->notifyAboutUpcomingBirthdays();

		Notification::assertNothingSent();
	}

	public function test_notify_about_todays_birthdays()
	{
		$service = new BirthdayService(new BirthdayDataProvider());
		$service->sync();

		$ivanov = UserRepository::fetchByName('–ò–≤–∞–Ω', '–ò–≤–∞–Ω–æ–≤');
		$ivanov->telegram_user_id = '1';
		$ivanov->save();

		$petrov = UserRepository::fetchByName('–ê—Ä—Å–µ–Ω–∏–π', '–ü–µ—Ç—Ä–æ–≤');
		$petrov->telegram_user_id = '2';
		$petrov->save();

		$sidorov = UserRepository::fetchByName('–ú–∏—Ö–∞–∏–ª', '–°–∏–¥–æ—Ä–æ–≤');
		$sidorov->telegram_user_id = '3';
		$sidorov->telegram_allow_notifications = false;
		$sidorov->save();

		// Ivanov's birthdate
		$this->travelTo(Carbon::createFromDate(month: 5, day: 20));

		$service->notifyAboutUpcomingBirthdays();

		Notification::assertCount(1);
		Notification::assertSentTo(
			[$petrov],
			function (BirthdayToday $notification) use ($petrov) {
				$message = $notification->toTelegram($petrov)->toArray();
				$text = $message['text'];
				$chatId = $message['chat_id'];

				assertSame('üéâüéÅ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ (–î–∏—Ä–µ–∫—Ç–æ—Ä) <b><u>—Å–µ–≥–æ–¥–Ω—è</u></b> –ø—Ä–∞–∑–¥–Ω—É–µ—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è (20 –º–∞—è).', $text);
				assertSame('2', $chatId);

				return true;
			}
		);
	}

	public function test_notify_about_tomorrow_birthdays()
	{
		$service = new BirthdayService(new BirthdayDataProvider());
		$service->sync();

		$petrov = UserRepository::fetchByName('–ê—Ä—Å–µ–Ω–∏–π', '–ü–µ—Ç—Ä–æ–≤');
		$petrov->telegram_user_id = '2';
		$petrov->save();

		// The day before Ivanov's birthdate
		$this->travelTo(Carbon::createFromDate(month: 5, day: 20)->subDay());

		$service->notifyAboutUpcomingBirthdays();

		Notification::assertCount(1);
		Notification::assertSentTo(
			[$petrov],
			function (BirthdayTomorrow $notification) use ($petrov) {
				$message = $notification->toTelegram($petrov)->toArray();
				$text = $message['text'];

				assertSame('üü† –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ (–î–∏—Ä–µ–∫—Ç–æ—Ä) <b><u>–∑–∞–≤—Ç—Ä–∞</u></b> –±—É–¥–µ—Ç –ø—Ä–∞–∑–¥–Ω–æ–≤–∞—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è (20 –º–∞—è).', $text);

				return true;
			}
		);
	}

	public function test_notify_about_birthdays_the_week_before()
	{
		$service = new BirthdayService(new BirthdayDataProvider());
		$service->sync();

		$petrov = UserRepository::fetchByName('–ê—Ä—Å–µ–Ω–∏–π', '–ü–µ—Ç—Ä–æ–≤');
		$petrov->telegram_user_id = '2';
		$petrov->save();

		// The week before Ivanov's birthdate
		$this->travelTo(Carbon::createFromDate(month: 5, day: 20)->subWeek());

		$service->notifyAboutUpcomingBirthdays();

		Notification::assertCount(1);
		Notification::assertSentTo(
			[$petrov],
			function (BirthdayInAWeek $notification) use ($petrov) {
				$message = $notification->toTelegram($petrov)->toArray();
				$text = $message['text'];

				assertSame('üü¢ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ (–î–∏—Ä–µ–∫—Ç–æ—Ä) <b><u>—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é</u></b> (20 –º–∞—è) –±—É–¥–µ—Ç –ø—Ä–∞–∑–¥–Ω–æ–≤–∞—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è.', $text);

				return true;
			}
		);
	}
}
